We considered Flask and Django for our project's technology stack. We considered these frameworks because our group was most comfortable using Python. However,
at first we thought using one language for the front and back end would streamline our process, but we decided that the time it would take for our whole group to 
learn JavaScript would negate any time saved by using Node.js. Additionally, much of what we read about Django said that it focused on rapid development, which we 
thought further widened the gap between how long it would take us to develop our app in Node.js (including learning JS) and how long it would taking us using Django. 
We also found that Django, while it had a smaller online community than Node.js, still had consistent and detailed documentation, which we thought would be sufficient
for any difficulties we encountered. Additionally, Django uses a derivative of the model-view-controller model, which we all felt comfortable and familiar with. 
Next we considered Flask. One thing that we immediately liked about Flask was its flexibility. Since Flask is so lightweight, it allows for quick app development. 
Naturally, the disadvantage to this is the need to import more from external libraries but we considered it more of a pro than a con. Additionally, Flask's integrated 
unit testing enables faster debugging. Ultimately, Flask separated itself by being lightweight, having extensive documentation, minimal features, and giving us full 
control over the development process.
