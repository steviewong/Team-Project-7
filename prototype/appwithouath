#imports
import requests, flask, flask_sqlalchemy, flask_login, numpy, dotenv, logging, oauthlib, flask_bcrypt, form
from getpass import getuser
from flask import Flask, Response, request, render_template, redirect, url_for, session, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, current_user, login_required, login_user, logout_user, UserMixin #LoginForm, is_safe_url
from flask_wtf import FlaskForm
from authlib.integrations.flask_client import OAuth
from dotenv import load_dotenv
from wtforms import StringField, PasswordField, SubmitField
from numpy.random import randint, choice
from urllib.parse import quote_plus, urlencode

import os, base64
import time 
from authlib.integrations.flask_client import OAuth
from os import environ as env
from sqlalchemy.sql import func

#init database directory
basedir = os.path.abspath(os.path.dirname(__file__))

#create app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'database.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = b'8439e671181dca475dad24b8ce65141d94159f5b3d813de1eac19bc6aec638de'

#init databse
db = SQLAlchemy(app)

#init login manager
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login.html'

#GLOBAL VARIABLES
genres = ['action', 'comedy', 'drama', 'fantasy', 'horror', 'mystery', 'romance', 'science fiction', 'thriller', 'christmas']
user = None

class User(UserMixin, db.Model):

    email = db.Column(db.String(50), primary_key=True)
    moviesToWatch = db.Column(db.Text)

    def __repr__(self):
        return f'<Logged in under {self.email}>'
    
    def get_id(self):
        return self.email

    def is_anonymous(self):
        return False

    def getMovies(self):
        return self.moviesToWatch
    
    def addMovie(self, movieTitle):
        self.moviesToWatch += movieTitle + '\n'


def hello():
    movie = getposter()
    #return '<h1>movie</h1>'
    return render_template('./index.html',movie = movie)


@app.route('/about/')
def about():
    return '<h3>This is a Flask web application.</h3>'

@app.route('/')
def start():
    mail = dict(session).get('email',None)
    user = User(email = mail, moviesToWatch = '')
    if not User.get(mail):
        User.create(mail)
    return render_template("./index.html", email =mail)


@app.route('/logged')
def started():

    email = dict(session).get('email',None)

    return render_template("./index.html", email = email)


def posty(movie):
   

    url = "https://imdb8.p.rapidapi.com/auto-complete"

		
    x =movie.replace(' ','%20')

    querystring = {"q":movie}

    headers = {
		"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
		"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
	}

    response = requests.request("GET",url, headers = headers, params=querystring)

	

    responsej = response.json() 

    if responsej['d'][0]['i']['imageUrl'] == None:
        return '<h2> Not a movie </h2>'
    
    img = responsej['d'][0]['i']['imageUrl']
    
    return img

@app.route('/search',methods = ['GET','POST'])
def getposter():
   

    url = "https://imdb8.p.rapidapi.com/auto-complete"
    movie = 0 
    movie = request.form['movieTitle']

    x =movie.replace(' ','%20')

    querystring = {"q":movie}

    headers = {
		"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
		"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
	}

    response = requests.request("GET",url, headers = headers, params=querystring)

	

    responsej = response.json() 
    if responsej['d'][0]['i']['imageUrl'] == None:
        return render_template('index.html')
    img = responsej['d'][0]['i']['imageUrl']
    
    return render_template('/index.html',movie = img)   

@app.route('/getmovie',methods= ['GET','POST'])
def getmovie():

    # if request.method == ['GET']:
    #     return('index.html')
    # else:

        all = recommend()
        movie = all[0]

        movie1 = movie[7:-1]

        print(movie1)


	
        url = "https://imdb8.p.rapidapi.com/title/get-base"
        querystring = {"tconst":movie1}

        headers = {
	"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
	"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
        }

        response = requests.request("GET", url, headers=headers, params=querystring)
        moviename = response.json()['title']
        print(response.json()['title'])
        
        print(response.json())
        poster = posty(movie1)

        return render_template("weather.html", name = moviename, movie = poster, weather = all[1])
   

	#route for if user selects weather option to generate movie

def getMovieForWeather(): #wrapper function to call both apis in order
    result = getWeather()
    movie = getMovie(result)
    return render_template('weather.html', movie=movie)


def getMovieForFilter(): #wrapper function to call the movie api based on filter input
    filter = request.form.get('genre')
    movie = getMovie(filter)
    return movie

def getWeather():
    #calls function to obtain current month
        month = getMonth()

        genre = ''

        url = "https://simple-weather2.p.rapidapi.com/weather"

        querystring = {"location":"Paris,France"}

        headers = {
	"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
	"X-RapidAPI-Host": "simple-weather2.p.rapidapi.com"
        }

        response = requests.request("GET", url, headers=headers, params=querystring)

 #code lines 84-93, with variable names edited, taken from RapidAPI listing for Yahoo Weather API at https://rapidapi.com/apishub/api/yahoo-weather5
        weatherResponseJ = response.json()

        weatherCondition = weatherResponseJ['current_weather']['description']
        temp = weatherResponseJ['current_weather']['temperature']

        #series of conditionals to determine appropriate genre based on a combination of the month, temp, and weather condition
        if 'Sunny' or 'Clear' in weatherCondition:
            possGenSunny = [0, 1, 2, 3, 6]
            genre = genres[choice(possGenSunny)]
        elif 'Rain' or 'Showers' in weatherCondition:
            if temp > 60:
                possGenRainHT = [1, 2, 3, 5, 7]
                genre = genres[choice(possGenRainHT)]
            else:
                possGenRainLT = [2, 4, 5, 7, 8]
                genre = genres[choice(possGenRainLT)] 
        elif 'Snow' in weatherCondition:
            possGenSnow = [3, 5, 6]
            genre = genres[choice(possGenSnow)]
        elif 'Cloudy' in weatherCondition:
            possGenCloudy = [0, 2, 5, 7, 8]
            genre = genres[choice(possGenCloudy)]
        elif 'Storm' in weatherCondition:
            possGenStorm = [0, 2, 4, 5, 8]
            genre = genres[choice(possGenStorm)]
        else:
            genre = genres[randint(0, 9)]
        
        return [genre,weatherCondition]


def recommend():
    num = randint(0,99)
    all = getWeather()
    genre = all[0]

    url = "https://imdb8.p.rapidapi.com/title/v2/get-popular-movies-by-genre"

    querystring = {"genre":genre,"limit":"100"}

    headers = {
			"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
				"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
					}

    response = requests.request("GET", url, headers=headers, params=querystring)

    

    option = response.json()[num]

    print(option)
    return [option,all[1]]

def recommendy(genre):
    num = randint(0,99)
    

    url = "https://imdb8.p.rapidapi.com/title/v2/get-popular-movies-by-genre"

    querystring = {"genre":genre,"limit":"100"}

    headers = {
			"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
				"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
					}

    response = requests.request("GET", url, headers=headers, params=querystring)

    

    option = response.json()[num]

    print(option)
    return option

@app.route('/filter',methods = ['GET','POST'])
def look_by_genre():


    
        genre = request.form['genre']

        movie = recommendy(genre)
        

        movie1 = movie[7:-1]

        print(movie1)


	
        url = "https://imdb8.p.rapidapi.com/title/get-base"
        querystring = {"tconst":movie1}

        headers = {
	"X-RapidAPI-Key": "708e98d42bmsh2404d0ed0519532p16b192jsn9727845ce981",
	"X-RapidAPI-Host": "imdb8.p.rapidapi.com"
        }

        response = requests.request("GET", url, headers=headers, params=querystring)
        moviename = response.json()['title']
        print(response.json()['title'])
        
        print(response.json())
        poster = posty(movie1)

        return render_template("weather.html", name = moviename, movie = poster, weather = '--')

    


oauth = OAuth(app)
app.secret_key = '8GTNQ_L7HZX'

google = oauth.register(
    name = "google",
    client_id = '894336266651-jsc8utbf0qfqjc4vau0n0v1819lskl29.apps.googleusercontent.com',
    client_secret = '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',
    access_token_url = 'https://accounts.google.com/o/oauth2/token', # possibly wrong
    acess_token_params = None,
    authorize_url = 'https://accounts.google.com/o/oauth2/auth',
    authorize_params = None,
    api_base_url = 'https://www.googleapis.com/oauth2/v1/',
    client_kwargs = {'scope': 'openid profile email'},
    jwks_uri = "https://www.googleapis.com/oauth2/v3/certs"
)

@app.route('/login',methods = ['GET','POST'])
def login():
    redirect_uri = url_for('authorize', _external=True)
    google = oauth.create_client('google')
    return google.authorize_redirect(redirect_uri)

@app.route('/authorize')
def authorize():
    google = oauth.create_client('google')
    token = google.authorize_access_token()
    resp = google.get('userinfo') # wrote this in video but was different in copy
    #resp.raise_for_status() - not in video, commented out for now
    user_info = resp.json()
    # # do something with the token and profile
    session['email'] = user_info['email']
    return redirect('/')

@app.route('/logout', methods = ['GET','POST'])
def logout():
    for key in list(session.keys()):
        session.pop(key)
    return redirect('/')

if __name__ == '__main__':
    app.debug = True
    app.run()